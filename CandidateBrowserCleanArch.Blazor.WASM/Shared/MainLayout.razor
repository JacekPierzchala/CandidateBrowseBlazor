@inherits LayoutComponentBase
@inject IUserSettingsProvider UserSettingsService
@inject ApiAuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable 

<div class="page @GetCssClass()">
    <RadzenDialog/>
    <RadzenNotification/>
    <main  >
        <div >
            <NavMenu />
        </div>

        <article class="content px-4 ">
            
            <ErrorBoundary >
                <ChildContent>
                    @Body
                </ChildContent>               
                <ErrorContent>
                    <ErrorElement />
                </ErrorContent>
            </ErrorBoundary>
                   
        </article>
    </main>
</div>
@code
{
    AuthenticationState authenticationState;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        UserSettingsService.SelectedThemeChange += OnSelectedThemeChange;
        AuthenticationStateProvider.AuthChange += async () => await HandleAuthenticationStateChanged();

        await GetTheme();
    }

    private string selectedTheme = ThemeStatics.Light;

    private string GetCssClass()
    {
        return selectedTheme == ThemeStatics.Light ? string.Empty : "dark-mode";
    }

    private async Task GetTheme()
    {
        string user = null;
        authenticationState = await authenticationStateTask;
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            user = authenticationState.User.Claims.FirstOrDefault(c => c.Type == CustomClaimTypes.Uid).Value;
            await UserSettingsService.GetTheme(user);
        }
    }

    private async Task HandleAuthenticationStateChanged()
    {
        await GetTheme();
    }

    private void OnSelectedThemeChange(string theme)
    {
        selectedTheme = theme;
        StateHasChanged();
    }

    public void Dispose()
    {
        UserSettingsService.SelectedThemeChange -= OnSelectedThemeChange;
        AuthenticationStateProvider.AuthChange -= async () => await HandleAuthenticationStateChanged();
    }
}