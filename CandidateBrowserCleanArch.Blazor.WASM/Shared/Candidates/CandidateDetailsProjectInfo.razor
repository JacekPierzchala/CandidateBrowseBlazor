@inject ICandidateProjectService CandidateProjectService
@inject IMapper mapper
@inject NotificationService NotificationService
@attribute [Authorize(Policy = PermissionStatics.CandidateRead)]

@if (confirmationDialogOpen)
{
    <DeleteConfirmation Message="@confirmationMessage" OnConfirmation="OnDeleteConfirmationReceived" Id="projectToDelete" />
}
@if (projectDialogOpen)
{
    <CandidateProjectEditDialog SaveProject="@(async(CandidateProjectEditModel model)=>await OnSaveProjectAsync(model))"
                            Model="project" Close="OnProjectClose" />
}

<RadzenStack JustifyContent="JustifyContent.Start" Gap="1rem" Wrap="FlexWrap.Wrap" Class="rz-p-1">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.Overline" Text="Projects:" class="rz-display-flex rz-mt-2 rz-my-0" />
        <RadzenButton Icon="add" Text="Add Project" Click="@(async()=>await OnProjectOpen(null))" />
    </RadzenStack>
    @if (Projects != null)
    {
        <ul class="timeline align-items-start mt-2 ml-5">
            @foreach (var project in Projects)
            {
                <li>
                    <RadzenStack JustifyContent="JustifyContent.Start" Gap="0" Wrap="FlexWrap.Wrap" class="mb-2">
                        <RadzenText style="width:245px" TextStyle="TextStyle.Body1"><b>@(project.Project.ProjectName)</b></RadzenText>
                        <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                            <AuthorizeView Policy="@PermissionStatics.CandidateUpdate">
                                <RadzenButton class="ms-1" Icon="edit" Click="@(async()=>await OnProjectOpen(project))" />
                                <RadzenButton class="ms-1" Click="@(async()=>await OnCompanyDelete(project))" Icon="delete" />
                            </AuthorizeView>
                        </RadzenStack>
                    </RadzenStack>

                </li>
            }
        </ul>
    }

</RadzenStack>


@code {
    [Parameter]
    public ICollection<CandidateProjectDto> Projects { get; set; }
    [Parameter]
    public int CandidateId { get; set; }

    int projectToDelete;
    CandidateProjectEditModel project;
    bool projectDialogOpen;
    bool confirmationDialogOpen;
    string? confirmationMessage;

    protected async override Task OnInitializedAsync()
    {
        if (Projects == null)
        {
            var response = await CandidateProjectService.GetProjectsByCandidateAsync(CandidateId);
            if (response.Success)
            {
                Projects = response.Data != null ? response.Data.ToList() : new List<CandidateProjectDto>();
            }
            else
            {
                //handle
            }
            Projects = Projects.OrderBy(c => c.Project.ProjectName).ToList();
        }
  
    }
    private async Task OnProjectClose()
    {
        projectDialogOpen = false;
    }


    private async Task OnProjectOpen(CandidateProjectDto? candidateProject)
    {

        if (candidateProject != null)
        {
            project = mapper.Map<CandidateProjectEditModel>(candidateProject);
        }
        else
        {
            project = new();
        }
        project.CandidateId = CandidateId;
        projectDialogOpen = true;
    }

    private async Task OnCompanyDelete(CandidateProjectDto project)
    {
        confirmationMessage = $"Are you sure to delete this company:{project.Project.ProjectName}?";
        projectToDelete = project.Id;
        confirmationDialogOpen = true;

    }

    private async Task OnSaveProjectAsync(CandidateProjectEditModel model)
    {
        var result = await ProcessProjectChange(model);
        if (result.result)
        {
            NotificationService
               .Notify(new NotificationMessage
                   {
                       Severity = NotificationSeverity.Success,
                       Duration = 4000,
                       Summary = "Success",
                       Detail = $"Update has succeeded"
                   });
        }
        else
        {
            NotificationService
               .Notify(new NotificationMessage
                   {
                       Severity = NotificationSeverity.Error,
                       Duration = 4000,
                       Summary = "Error",
                       Detail = $"Update has failed:{result.message}"
                   });
        }
        projectDialogOpen = false;
    }

    private async Task OnDeleteConfirmationReceived(Tuple<bool, int> message)
    {
        if (message.Item1)
        {
            var result = await CandidateProjectService.DeleteCandidateProjectAsync(message.Item2);
            if (!result.Success)
            {
                NotificationService
                                .Notify(new NotificationMessage
                                    {
                                        Severity = NotificationSeverity.Error,
                                        Duration = 4000,
                                        Summary = "Error",
                                        Detail = $"Update has failed:{result.Message}"
                                    });

            }
            var candidateProject = Projects.FirstOrDefault(co => co.Id == message.Item2);
            if (candidateProject != null)
            {
                Projects.Remove(candidateProject);
            }
        }
        confirmationDialogOpen = false;
    }

    private async Task<(bool result, string message)> ProcessProjectChange(CandidateProjectEditModel model)
    {
        (bool result, string message) result = new();
        if (model.Id > 0)
        {
            var resultService = await CandidateProjectService.UpdateCandidateProjectAsync(model);
            if (resultService.Success)
            {
                var candidateProjectDto = Projects.FirstOrDefault(co => co.Id == resultService.Data.Id);
                if (candidateProjectDto != null)
                {
                    Projects.Remove(candidateProjectDto);
                }
                Projects.Add(resultService.Data);
            }

            result.result = resultService.Success;
            result.message = resultService.Message;
        }
        else
        {
            var resultService = await CandidateProjectService.AddCandidateProjectAsync(model);
            if (resultService.Success)
            {
                Projects.Add(resultService.Data);
            }
            result.result = resultService.Success;
            result.message = resultService.Message;

        }
        Projects = Projects.OrderBy(c => c.Project.ProjectName).ToList();
        return result;
    }
}
