
@attribute [Authorize(Policy = PermissionStatics.CandidateRead)]

@if (confirmationDialogOpen)
{
    <DeleteConfirmation Message="@confirmationMessage" OnConfirmation="OnDeleteConfirmationReceived" Id="projectToDelete" />
}
@if (projectDialogOpen)
{
    <CandidateProjectEditDialog SaveProject="@(async(CandidateProjectEditModel model)=>await OnSaveProjectAsync(model))"
                            Model="project" Close="OnProjectClose" />
}

<RadzenStack JustifyContent="JustifyContent.Start" Gap="1rem" Wrap="FlexWrap.Wrap" Class="rz-p-1">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.Overline" Text="Projects:" class="rz-display-flex rz-mt-2 rz-my-0" />
        <RadzenButton Icon="add" Text="Add Project" Click="@(async()=>await OnProjectOpen(null))" />
    </RadzenStack>
    @if (Projects != null)
    {
        <ul class="timeline align-items-start mt-2 ml-5">
            @foreach (var project in Projects)
            {
                <li>
                    <RadzenStack JustifyContent="JustifyContent.Start" Gap="0" Wrap="FlexWrap.Wrap" class="mb-2">
                        <RadzenText style="width:245px" TextStyle="TextStyle.Body1"><b>@(project.Project.ProjectName)</b></RadzenText>
                        <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                            <AuthorizeView Policy="@PermissionStatics.CandidateUpdate">
                                <RadzenButton class="ms-1" Icon="edit" Click="@(async()=>await OnProjectOpen(project))" />
                                <RadzenButton class="ms-1" Click="@(async()=>await OnCompanyDelete(project))" Icon="delete" />
                            </AuthorizeView>
                        </RadzenStack>
                    </RadzenStack>

                </li>
            }
        </ul>
    }

</RadzenStack>
