@inject DialogService DialogService

    <RadzenMenu>
        <AuthorizeView Context="Parent" Policy=@PermissionStatics.CandidateRead>
            <Authorized  >
            <RadzenMenuItem class="m-1" Path="@UrlStatics.home" Text="Candidates" Icon="dashboard" />
            <AuthorizeView Context="Child" Policy=@PermissionStatics.UserUpdate>
                 <Authorized >
                             <RadzenMenuItem class="m-1" Path="@UrlStatics.users" Text="Users" Icon="face" />
                             </Authorized>
             </AuthorizeView>

            <RadzenMenuItem class="m-1"  Icon="person">
                <RadzenMenuItem Path="@UrlStatics.logout" class="m-1" Text="Log Out" Icon="account_circle"/>
                <RadzenMenuItem Click="OnSettingsOpen" class="m-1" Text="My Settings" Icon="manage_accounts">
                @*    @if(settignsOpen)
                    {
                        <MySettings  Close="OnSettingsClosed" />*@
                 @*   }*@
                </RadzenMenuItem>
            </RadzenMenuItem>
   
            </Authorized>
            <NotAuthorized>
            </NotAuthorized>

        </AuthorizeView>

    </RadzenMenu>


@code {
    //bool settignsOpen;

    //private void OnSettingsClosed()
    //{
    //    settignsOpen = false;
    //}
    //private void OnSettingsOpen()
    //{
    //    settignsOpen = true;
    //}

    public async Task OnSettingsOpen()
    {
        await DialogService.OpenSideAsync<MySettings>("User settings", null,
         new SideDialogOptions
             {
                 CloseDialogOnOverlayClick = false,
                 Position = DialogPosition.Right,
                 ShowMask = true,
                 ShowTitle = true,
                 Height = "600px;",
                 Width = "400px;"
             });
    }
}
