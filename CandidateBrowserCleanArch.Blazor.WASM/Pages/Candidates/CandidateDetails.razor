@page "/candidate/{id:int}"
@inject IAuthenticationService AuthenticationService
@inject ICandidatesService CandidatesService
@inject HttpInterceptorService HttpInterceptorService
@implements IDisposable
@attribute [Authorize(Policy = PermissionStatics.CandidateRead)]

@if (Candidate != null && loadFinished)
{
    <RadzenCard class="my-4" style="min-width:330px">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">

            <RadzenCard class="rz-shadow-5 rz-my-3 rz-mx-auto">
               <CandidateDetailsMainInfo Candidate="@Candidate"/>
            </RadzenCard>
            <RadzenCard class="rz-shadow-5 rz-my-3 rz-mx-auto">
                <CandidateDetailsCompanyInfo CandidateId="Candidate.Id" Companies="Candidate.Companies" />
            </RadzenCard>
            <RadzenCard class="rz-shadow-5 rz-my-3 rz-mx-auto">
                <CandidateDetailsProjectInfo CandidateId="Candidate.Id" Projects="Candidate.Projects" />
            </RadzenCard>
        </RadzenStack>
    </RadzenCard>

}
else if (loadFinished)
{
    <NotFoundElement Message="@message" />
}
else
{
    <LoadingElement Message="Loading candidate details..." />
}


@code {
    [Parameter]
    public int Id { get; set; }
    CandidateDetailsDto Candidate;
    bool loadDataResult;
    bool loadFinished;
    string message = string.Empty;
    protected async override Task OnInitializedAsync()
    {
        loadFinished = false;
        HttpInterceptorService.RegisterEvent();

        var request = await CandidatesService.GetCandidateDetailsAsync(Id);
        loadDataResult = request.Success;
        Candidate = request.Data;
        message = request.Message;
        loadFinished = true;
    }


    public void Dispose()
    {
        HttpInterceptorService.DisposeEvent();
    }
}
